package newsFragmentimport Adabter.NewsAdabterimport Base.BaseFragmentimport android.os.Bundleimport android.view.Viewimport androidx.fragment.app.viewModelsimport androidx.lifecycle.Observerimport androidx.navigation.fragment.findNavControllerimport com.google.android.material.tabs.TabLayoutimport com.google.android.material.tabs.TabLayout.OnTabSelectedListenerimport com.mohamed.news_app.Rimport com.mohamed.news_app.databinding.FragmentNewsBindingimport dagger.hilt.android.AndroidEntryPointimport model.Articlesimport model.NewsSources@AndroidEntryPointclass NewsFragment :BaseFragment<FragmentNewsBinding>(){    private val viewModel by viewModels<NewsViewModel>()    var newsAdabter=NewsAdabter()    override fun getLayoutId(): Int    {        return R.layout.fragment_news    }    override fun onViewCreated(view: View, savedInstanceState: Bundle?)    {        super.onViewCreated(view, savedInstanceState)        initViews()        viewModel.getNewsSources()        observeLiveData()        setupSearchBar()    }    private fun setupSearchBar()    {        binding.etSearch.setOnQueryTextListener(object : androidx.appcompat.widget.SearchView.OnQueryTextListener{            override fun onQueryTextSubmit(query: String?): Boolean            {                if (query.isNullOrEmpty()){                    viewModel.getNewsSources()                }             return true            }           override fun onQueryTextChange(newText: String?): Boolean           {               viewModel.searchArticles(newText).let { newsAdabter.changeData(it as List<Articles>) }               return true           }                    })    }    private fun observeLiveData()    {        viewModel.sourceLiveData.observe(viewLifecycleOwner) { sourcesList ->            showNewsSources(sourcesList)        }        viewModel.articleLiveData.observe(viewLifecycleOwner) { articlesList ->            showArticlesList(articlesList)        }        viewModel.uiMessage.observe(viewLifecycleOwner, Observer{ message->        })    }    private fun showArticlesList(articlesList: List<Articles?>?)    {        newsAdabter.changeData(articlesList as List<Articles>)    }    fun initViews()    {        binding.recyclerView.adapter=newsAdabter        newsAdabter.onItemClick=NewsAdabter.OnItemClickListener {            article,_ ->            article.let {            val action=NewsFragmentDirections.actionNewsFragmentToArticlesDetailesFragment(article.title ?:"")            findNavController().navigate(action)}        }//      newsAdabter.onItemClick= NewsAdabter.OnItemClickListener {//          article->//          val action=NewsFragmentDirections.actionNewsFragmentToArticlesDetailesFragment(article.title ?:"")//          findNavController().navigate(action)//      }    }    private fun showNewsSources(sources: List<NewsSources?>?)    {        sources?.forEach { sources ->            val tab = binding.tabLayout.newTab()            tab.setText(sources?.name)            tab.tag=sources            binding.tabLayout.addTab(tab)        }        binding.tabLayout.addOnTabSelectedListener(object :OnTabSelectedListener{            override fun onTabReselected(tab: TabLayout.Tab?)            {                val source=tab?.tag as NewsSources                viewModel.getNews(source.id ?:"")            }            override fun onTabSelected(tab: TabLayout.Tab?)            {                val source=tab?.tag as NewsSources                viewModel.getNews(source.id ?:"")            }            override fun onTabUnselected(tab: TabLayout.Tab?)            {            }        })    }}